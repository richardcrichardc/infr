package evilbootstrap

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
)

type gist struct {
	httpClient http.Client
	Id         string
}

type fileOut struct {
	Content string `json:"content"`
}

type gistOut struct {
	Public bool               `json:"public"`
	Files  map[string]fileOut `json:"files"`
}

type fileIn struct {
	RawUrl string `json:"raw_url"`
}

type gistIn struct {
	Id    string            `json:"id"`
	Files map[string]fileIn `json:"files"`
}

func NewGist() (*gist, error) {
	g := new(gist)

	create := new(gistOut)
	create.Public = false
	create.Files = make(map[string]fileOut)
	create.Files["dummy"] = fileOut{"Dummy file"}

	result := new(gistIn)
	err := g.doJSON("POST", "/gists", create, result)
	if err != nil {
		return nil, err
	}

	fmt.Printf("%#v\n", result)

	g.Id = result.Id

	return g, nil
}

func (g *gist) doJSON(method, endpoint string, out, in interface{}) error {
	url := "https://api.github.com" + endpoint

	jsonOut, err := json.Marshal(out)
	if err != nil {
		return err
	}

	req, err := http.NewRequest(method, url, bytes.NewBuffer(jsonOut))
	resp, err := g.httpClient.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	if resp.StatusCode >= 400 {
		return fmt.Errorf("%s %s -> %d", method, url, resp.StatusCode)
	}

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return err
	}

	err = json.Unmarshal(body, in)
	if err != nil {
		return err
	}

	return nil
}
