#!/bin/bash -ex
# Perform a backup of remote host by:
#  * sshing in,
#  * taking a btrfs snapshot (for host and each LXC)
#  * pipeing snapshots back using btrfs send
#  * saving snapshot locally using btrfs receive
#  * removing earlier snapshots
#
# Various assumptions are made about where snapshots etc are kept
# other scripts set up \directories and ssh access required for this script to work

if [ ! "$#" -eq 1 ];then
	echo Usage: backup-host host
	exit 1
fi

FROM=$1
TO=$(hostname)
DIR=/var/lib/backups/backups/$FROM
FQDN=$FROM.$(cat /etc/infr-domain)
TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%S)

if [ ! -d $DIR ];then
	echo $DIR is not a directory
	exit 1
fi

cd $DIR

(
	if ! flock -n 9; then
		echo Backup of $FROM already in progress
		exit 1
	fi

	# clean up any mess left over from last time
	if [ -e incoming ]; then
		if [ -n "`ls incoming`" ]; then
			sudo btrfs subvolume delete incoming/*
		fi
		rmdir incoming
	fi

	LAST=$(ls | tail -n 1)

	mkdir incoming
	cd incoming

	# create then send new remote snapshots
	for SNAP in `ssh backup_user@$FQDN -C "cd snapshots-for; backup-snap $TO/$TIMESTAMP"`; do
		echo snap $SNAP

		# did we get a successful snapshot for SNAP from last backup
		LAST_SNAP=$LAST/$SNAP
		echo last $LAST_SNAP
		if [ ! -e "../$LAST_SNAP" ]; then
			LAST_SNAP=""
		fi

		# copy the snapshot to this host
		ssh -C backup_user@$FQDN "cd snapshots-for/$TO; sudo backup-send $TIMESTAMP/$SNAP $LAST_SNAP" | sudo btrfs receive .
	done

	# if we get this far, we have successfully transfered all backups, do atomic mv to 'commit' incoming backup
	cd ..
	mv incoming $TIMESTAMP

	# delete all but the last set of remote snapshots
	ssh backup_user@$FQDN -C "backup-cull-snaps $TO"

	# delete old backups
	for DIR in `ls | backups-to-cull`; do
		if [ -n "`ls $DIR`" ]; then
			chronic sudo btrfs subvolume delete $DIR/*
		fi
		rmdir $DIR
	done



) 9>.lockfile
